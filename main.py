from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters,
    ContextTypes, ConversationHandler
)
import logging

API_TOKEN = '7061910884:AAFuIhI_YJrvfb2bvrYV3OTbh-Azi9QG7Gc'
ADMIN_IDS = [7317215910, 703605167]
CHANNEL_LINK = "https://t.me/+syIFV7GBgEc5OTcy"
ASK_QUESTION = 1

logging.basicConfig(level=logging.INFO)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = InlineKeyboardMarkup(
        [[InlineKeyboardButton("–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É", callback_data="submit")]]
    )
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–∞—à–µ–º—É –∑–∞–∫—Ä—ã—Ç–æ–º—É –∫–∞–Ω–∞–ª—É –ø—Ä–æ–π–¥–∏ –ø—Ä–æ—Å—Ç—É—é –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é.\n\n"
        "‚è± –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–∫–∏ ‚Äî –æ—Ç 1 –¥–æ 15 –º–∏–Ω—É—Ç.",
        reply_markup=keyboard
    )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data == "submit":
        context.user_data["attempts"] = 2
        await query.message.reply_text("‚ùì –í–æ–ø—Ä–æ—Å: —Å–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç 3 + 2 + 2?")
        return ASK_QUESTION

async def handle_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    attempts = context.user_data.get("attempts", 0)
    if text == "7":
        keyboard = InlineKeyboardMarkup(
            [[InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{update.effective_user.id}")]]
        )
        for admin_id in ADMIN_IDS:
            await context.bot.send_message(
                admin_id,
                f"üì® –ó–∞—è–≤–∫–∞ –æ—Ç @{update.effective_user.username or update.effective_user.full_name} (ID: {update.effective_user.id})",
                reply_markup=keyboard
            )
        await update.message.reply_text(
            "‚úÖ –ó–∞—è–≤–∫–∞ –ø–æ–¥–∞–Ω–∞. –û–∂–∏–¥–∞–π—Ç–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n\n‚è≥ –û–±—ã—á–Ω–æ —ç—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç –æ—Ç 1 –¥–æ 15 –º–∏–Ω—É—Ç."
        )
        return ConversationHandler.END
    else:
        attempts -= 1
        context.user_data["attempts"] = attempts
        if attempts > 0:
            await update.message.reply_text(f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {attempts}")
            return ASK_QUESTION
        else:
            await update.message.reply_text("‚õî –ü–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã.")
            return ConversationHandler.END

async def approve_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.from_user.id not in ADMIN_IDS:
        await query.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
        return
    user_id = int(query.data.split("_")[1])
    try:
        await context.bot.send_message(
            user_id,
            f"üéâ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!\n\nüëâ –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª: {CHANNEL_LINK}"
        )
        await query.edit_message_text("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–≥–ª–∞—à—ë–Ω.")
    except Exception as e:
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")

def main():
    app = Application.builder().token(API_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(button_handler, pattern="^submit$")],
        states={ASK_QUESTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_answer)]},
        fallbacks=[],
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(conv_handler)
    app.add_handler(CallbackQueryHandler(approve_handler, pattern="^approve_"))

    app.run_polling()

if __name__ == "__main__":
    main()
